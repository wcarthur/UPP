# configure.upp
#
# This file was automatically generated by the configure script in the
# top level directory. You may make changes to the settings in this
# file but be aware they will be overwritten each time you run configure.
# Ordinarily, it is necessary to run configure once, when the code is
# first installed.
#
# To permanently change options, change the settings for your platform
# in the file arch/configure.defaults then rerun configure.
#

SHELL           	=       /bin/sh

LDFLAGS_MPI             =     # to be overridden later

#### Architecture specific settings ####


WRF_LIB_EXTRA = -L$(WRF_DIR)/external/RSL_LITE -lrsl_lite

# Settings for Linux x86_64, Intel compiler	 (dmpar)#
SFC     = ifort
SF90    = ifort -free
SCC     = icc

DM_FC  = mpif90 -f90=$(SFC) 
DM_F90 = mpif90 -f90=$(SFC) -free 
DM_CC  = mpicc 

FC      = $(DM_FC)
F90     = $(DM_F90)
CC      = $(DM_CC)
CPP     = /lib/cpp

LINUX_OBJ     =
BYTE_ORDER    = UPPLITTLEENDIAN
SIZE_I8R8   = -r8 -i8
SIZE_I4R8   = -r8 -i4
SIZE_I4R4   = -r4 -i4
SIZE        =

PPDEFINE   = -DCOMMCODE -DLINUX -D$(BYTE_ORDER)
FPPDEFINE  = $(PPDEFINE)

FDEBUG  = -O0 -g -traceback -check all -ftrapuv -fpe0
CRTMDBUG= -O0 -g -traceback -check all -ftrapuv -fpe0
CDEBUG  = -O0 -g -traceback -debug all -Wall -check-uninit

FOPT    = -O3 
CRTMOPT = -O3
COPT    = -O3

CPP_FLAGS = -traditional-cpp -P $(FPPDEFINE)
INC_FLAGS =
LDFLAGS   = -Wl,-noinhibit-exec 
FFLAGS    = -fp-model precise -ftz -assume byterecl -convert big_endian \
            -heap-arrays $(SIZE) $(FPPDEFINE) $(FOPT)
CFLAGS    = $(PPDEFINE) $(COPT)
ARFLAGS   =

FFLAGS_CRTM  = -c -fp-model precise -ftz  -assume byterecl -convert big_endian \
               $(SIZE) $(FOPT)
#FFLAGS_CRTM = -c -checkbound -convert big_endian -e03 -free -assume byterecl -fp-stack-check -mieee-fp
FL_CRTM     = 

###########################################################
#
#	Macros, these should be generic for all machines
LN		=   ln -sf
MAKE  =   make
RM		=   /bin/rm -f
CP		=   /bin/cp
MV              =   /bin/mv
AR		=   ar ru

WRF_DIR         =    /short/w85/cxa547/WRFV_3.7.1/WRFV3/
WRF_LIB2        =    
NETCDFPATH      =    /apps/netcdf/4.3.3.1
NETCDFLIBS      =     -lnetcdf -lnetcdff

COMMS_ADD_OBJ   =    
COMMS_ADD_OBJST =    
COMMS_LIB       =    

SERIAL_MPI_STUB =    
SERIAL_MPI_LIB  =    

GRIB2SUPT_LIB   =    -L/usr/lib64 -lpng -lz -ljasper
GRIB2SUPT_INC   =    -I/usr/include

BINDIR          =    /short/w85/cxa547/UPP/bin
INCMOD          =    /short/w85/cxa547/UPP/include
LIBDIR          =    /short/w85/cxa547/UPP/lib

WRF_INCLUDE     = -I$(WRF_DIR)/frame

WRF_LIB         = -L$(WRF_DIR)/main  -lwrflib \
                  -L$(WRF_DIR)/external/io_int -lwrfio_int \
                  -L$(WRF_DIR)/external/io_netcdf -lwrfio_nf \
                  -L$(WRF_DIR)/external/io_grib1 -lio_grib1 \
		  -L$(WRF_DIR)/external/io_grib2 -lio_grib2 \
                  -L$(WRF_DIR)/external/io_grib_share -lio_grib_share \
                  -L$(WRF_DIR)/external/esmf_time_f90 -lesmf_time \
                  -L$(WRF_DIR)/external/fftpack/fftpack5 -lfftpack

WRF_MODS        = $(WRF_DIR)/frame/module_internal_header_util.o \
                  $(WRF_DIR)/frame/pack_utils.o \
                  $(WRF_DIR)/frame/module_machine.o \
		  $(WRF_DIR)/frame/module_wrf_error.o \
		  $(WRF_DIR)/frame/wrf_debug.o

#
# These files may be changed to enable other files with the same 
# functions definitions, but different logic.  This is typically
# how backward compatibilty is achieved for the community code.
INITPOST_NMM_BIN_MPIIO = INITPOST_NMM_BIN_MPIIO_IJK.f
GRIBIT = GRIBIT.f
CALRAD = CALRAD_WCLOUD_crtm.f

# There is probably no reason to modify these rules
.SUFFIXES : .c .f .f90
.c.o:
	$(CC) $(CFLAGS) $(EXTRA_CFLAGS)  $<

.f.o:
	$(FC) $(FFLAGS) $(EXTRA_FFLAGS) $<

.f90.o :
	$(F90) $(FFLAGS) $(EXTRA_FFLAGS) $<

.F.o:
	$(CPP) $(CPP_FLAGS) $< > $*.f
	$(FC) $(FFLAGS) $(EXTRA_FFLAGS) $<

.F90.o:
	$(CPP) $(CPP_FLAGS) $< > $*.f90
	$(F90) $(FFLAGS) $(EXTRA_FFLAGS) $<
